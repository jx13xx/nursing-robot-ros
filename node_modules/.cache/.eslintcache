[{"/home/robot/Desktop/nursing-robot-ros/src/index.js":"1","/home/robot/Desktop/nursing-robot-ros/src/App.js":"2","/home/robot/Desktop/nursing-robot-ros/src/reportWebVitals.js":"3","/home/robot/Desktop/nursing-robot-ros/src/components/Footer.jsx":"4","/home/robot/Desktop/nursing-robot-ros/src/components/Body.jsx":"5","/home/robot/Desktop/nursing-robot-ros/src/components/Header.jsx":"6","/home/robot/Desktop/nursing-robot-ros/src/components/Home.jsx":"7","/home/robot/Desktop/nursing-robot-ros/src/components/ContactUsPage.jsx":"8","/home/robot/Desktop/nursing-robot-ros/src/components/About.jsx":"9","/home/robot/Desktop/nursing-robot-ros/src/components/Connection.jsx":"10","/home/robot/Desktop/nursing-robot-ros/src/components/TeleOperation.jsx":"11","/home/robot/Desktop/nursing-robot-ros/src/scripts/config.js":"12","/home/robot/Desktop/nursing-robot-ros/src/components/RobotState.jsx":"13"},{"size":547,"mtime":1651906492358,"results":"14","hashOfConfig":"15"},{"size":308,"mtime":1651906492358,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1651906492358,"results":"17","hashOfConfig":"15"},{"size":791,"mtime":1651906492358,"results":"18","hashOfConfig":"15"},{"size":719,"mtime":1651906492358,"results":"19","hashOfConfig":"15"},{"size":1289,"mtime":1651906492358,"results":"20","hashOfConfig":"15"},{"size":981,"mtime":1651990007734,"results":"21","hashOfConfig":"15"},{"size":1654,"mtime":1651906492358,"results":"22","hashOfConfig":"15"},{"size":358,"mtime":1651906492358,"results":"23","hashOfConfig":"15"},{"size":1604,"mtime":1651906492358,"results":"24","hashOfConfig":"15"},{"size":3065,"mtime":1651915842487,"results":"25","hashOfConfig":"15"},{"size":222,"mtime":1651996058920,"results":"26","hashOfConfig":"15"},{"size":4072,"mtime":1651996835626,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"s133k4",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/robot/Desktop/nursing-robot-ros/src/index.js",[],["58","59"],"/home/robot/Desktop/nursing-robot-ros/src/App.js",[],"/home/robot/Desktop/nursing-robot-ros/src/reportWebVitals.js",[],"/home/robot/Desktop/nursing-robot-ros/src/components/Footer.jsx",[],"/home/robot/Desktop/nursing-robot-ros/src/components/Body.jsx",[],"/home/robot/Desktop/nursing-robot-ros/src/components/Header.jsx",[],"/home/robot/Desktop/nursing-robot-ros/src/components/Home.jsx",["60"],"import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Connection from \"./Connection\";\nimport TeleOperation from \"./TeleOperation\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport RobotState from \"./RobotState\";\n\nclass Home extends Component {\n  state = {\n    counter: 1,\n  };\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1 className=\"text-center mt-3\">Nursing Robot Control Interface</h1>\n          <Row>\n            <Col>\n              <Connection />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <TeleOperation />\n            </Col>\n            <Col>\n              <h1>MAP </h1>\n              <p>This will be added on later for displaying the map buttons</p>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <RobotState />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/robot/Desktop/nursing-robot-ros/src/components/ContactUsPage.jsx",[],"/home/robot/Desktop/nursing-robot-ros/src/components/About.jsx",[],"/home/robot/Desktop/nursing-robot-ros/src/components/Connection.jsx",["61"],"import React, { Component } from 'react'\nimport { Alert } from 'react-bootstrap';\nimport config from \"../scripts/config.js\"\n\nclass Connection extends Component {\n state = {\n     connect: false,\n     ros: null\n     \n }\n\n constructor(){\n     super();\n     this.init_connection();\n }\n\n init_connection(){\n     this.state.ros = new window.ROSLIB.Ros();\n    \n     console.log(this.state.ros);\n     this.state.ros.on(\"connection\", () =>{\n         console.log(\"connection established\");\n         this.setState({ connect: true});\n     });\n\n     this.state.ros.on(\"close\", () =>{\n        console.log(\"connection is closed\");\n        this.setState({ connect: false});\n\n        // try to reconnect every 3 seconds\n        setTimeout( () =>{\n            try{\n                this.state.ros.connect(\"ws://\"+config.ROSBRIDGE_SERVER_IP+\":\"+config.ROSBRIDGE_SERVER_PORT + \"\");\n             } catch(error) {\n                 console.log(\"failed to connect to ros client\")\n                }\n        },  config.RECONNECTION_TIMER)\n     });\n\n     try{\n         console.log(\"ws://\"+config.ROSBRIDGE_SERVER_IP+\":\"+config.ROSBRIDGE_SERVER_PORT + \"\");\n        this.state.ros.connect(\"ws://\"+config.ROSBRIDGE_SERVER_IP+\":\"+config.ROSBRIDGE_SERVER_PORT + \"\");\n     } catch(error) {console.log(\"failed to connect to ros client\")}\n }\n\n render() {\n     return (\n         <div>\n             <Alert className=\"text-center m-3\" \n             variant={this.state.connect? \"success\" : \"danger\"}>{this.state.connect? \"ROS Client Established\" : \"ROS Client not Established\"}</Alert>\n         </div>\n     )\n }\n\n\n}\n\nexport default Connection;","/home/robot/Desktop/nursing-robot-ros/src/components/TeleOperation.jsx",["62"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport config from \"../scripts/config.js\";\nclass TeleOperation extends Component {\n  state = {\n    ros: null,\n    connect: false,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in the teleoperation\");\n      console.log(this.state.ros);\n      this.setState({ connect: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed\");\n      this.setState({ connect: false });\n\n      // try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"failed to connect to ros client\");\n        }\n      }, config.RECONNECTION_TIMER);\n    });\n\n    try {\n      console.log(\n        \"ws://\" +\n          config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      this.state.ros.connect(\n        \"ws://\" +\n          config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\"failed to connect to ros client\");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    // we need to create a twist message to be published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n\n    // we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    // we need to create a twist message to be published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n\n    // we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"grey\"\n          stickColor=\"black\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default TeleOperation;\n","/home/robot/Desktop/nursing-robot-ros/src/scripts/config.js",[],"/home/robot/Desktop/nursing-robot-ros/src/components/RobotState.jsx",["63","64","65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":2,"column":10,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":18,"column":6,"nodeType":"77","messageId":"78","endLine":18,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":19,"column":5,"nodeType":"77","messageId":"78","endLine":19,"endColumn":15},{"ruleId":"71","severity":1,"message":"79","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":18},{"ruleId":"71","severity":1,"message":"80","line":4,"column":20,"nodeType":"73","messageId":"74","endLine":4,"endColumn":29},{"ruleId":"71","severity":1,"message":"72","line":4,"column":31,"nodeType":"73","messageId":"74","endLine":4,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":23,"column":5,"nodeType":"77","messageId":"78","endLine":23,"endColumn":15},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Connection' is defined but never used.","'Container' is defined but never used.","no-global-assign","no-unsafe-negation"]